#include "abstracttype.h"
#include "iostream"

using namespace std;

//--------------------------------------------------------------------------------------
//---------------------Constructeur-----------------------------------------------------
//--------------------------------------------------------------------------------------
AbstractType::AbstractType(const QString nom, const TypeCreature t) : QObject()
{
    this->nom = new QString(nom);
    this->type = new TypeCreature(t);
}

//--------------------------------------------------------------------------------------
//----------------------Destructeur-----------------------------------------------------
//--------------------------------------------------------------------------------------
AbstractType::~AbstractType() throw(){
    delete nom;
    delete type;
}
//--------------------------------------------------------------------------------------
//---------------------Operateur--------------------------------------------------------
//--------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------
//---------------------Fonction public--------------------------------------------------
//--------------------------------------------------------------------------------------
bool AbstractType::isWeakness(const AbstractType &type) const{
    return getAttCoef(type)>TableTypes::COEF_NORMAL;
}
//--------------------------------------------------------------------------------------
bool AbstractType::isResistance(const AbstractType &type) const{
    return getAttCoef(type)<TableTypes::COEF_NORMAL;
}
//--------------------------------------------------------------------------------------
double AbstractType::getAttCoef( const AbstractType &att) const{
    return TableTypes::getAttMultiplier(this->getType(),att.getType());
}
//--------------------------------------------------------------------------------------
QString AbstractType::getNom()const{
    return *(this->nom);
}
//--------------------------------------------------------------------------------------
bool AbstractType::isOneofMyType(const AbstractType &att) const{
    return this->getType() == att.getType();
}
//--------------------------------------------------------------------------------------
//---------------------Fonction protected-----------------------------------------------
//--------------------------------------------------------------------------------------
TypeCreature AbstractType::getType() const{
    return *(this->type);
}
//--------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------
//---------------------Fonction private-------------------------------------------------
//--------------------------------------------------------------------------------------
